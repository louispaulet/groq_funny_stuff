const processEnv = typeof globalThis !== 'undefined' && globalThis.process?.env ? globalThis.process.env : undefined

function getEnvValue(key) {
  if (!key) return undefined
  if (processEnv && processEnv[key] !== undefined) return processEnv[key]
  return undefined
}

const FALLBACK_BASE_URL = (getEnvValue('VITE_CHAT_BASE_URL') || 'https://groq-endpoint.louispaulet13.workers.dev').replace(/\/$/, '')

export const experiences = [
  {
    id: 'allergyfinder',
    path: '/allergyfinder',
    name: 'AllergyFinder',
    headline: 'Allergy Assistant',
    description: 'Use Groq to explore ingredient lists, highlight allergens, and triage food questions with product context.',
    badge: 'Nutrition',
    heroGradient: 'from-emerald-500 to-teal-500',
    panelAccent: 'bg-emerald-100 text-emerald-900 dark:bg-emerald-500/20 dark:text-emerald-200',
    navAccent: {
      gradient: 'from-emerald-500 to-teal-500',
      hover:
        'hover:bg-emerald-500/10 hover:text-emerald-600 hover:border-emerald-400/60 dark:hover:bg-emerald-500/20 dark:hover:text-emerald-200 dark:hover:border-emerald-400/60',
      focus: 'focus-visible:ring-emerald-500/40',
    },
    defaultModel: 'openai/gpt-oss-20b',
    modelOptions: ['openai/gpt-oss-20b', 'openai/gpt-oss-120b'],
    greeting: "Hi! Ask me about allergens in any food and I'll look it up for you.",
    promptPlaceholder: 'Ask about allergens in a recipe or packaged food...', 
    systemPrompt: [
      'You are an allergy assistant that uses product data to answer questions about food allergens.',
      'Use the provided context when it is relevant and be transparent about any gaps.',
      'When a barcode is available, share the product page URL.',
      'Encourage users to double-check packaging for medical decisions.',
      'When allergy notes from the Allergy Cookie Editor are supplied, treat them as authoritative user-provided context and surface relevant reminders proactively.',
    ].join(' '),
    allowBaseUrlOverride: false,
    enableStlViewer: false,
    enableBarcodeScanner: true,
    logLabel: 'AllergyFinder',
    defaultBaseUrl: (getEnvValue('VITE_ALLERGY_CHAT_BASE_URL') || FALLBACK_BASE_URL).replace(/\/$/, ''),
  },
  {
    id: 'objectmaker',
    path: '/objectmaker',
    name: 'Object Maker',
    headline: 'Design JSON → Create Objects',
    description:
      'Handcraft a JSON structure or ask the assistant to propose one, then call the /obj endpoint to instantiate concrete objects. Save results and browse them in the Zoo.',
    badge: 'Builder',
    heroGradient: 'from-yellow-400 to-amber-600',
    panelAccent: 'bg-yellow-100 text-yellow-900 dark:bg-yellow-500/20 dark:text-yellow-200',
    navAccent: {
      gradient: 'from-yellow-400 to-amber-600',
      hover:
        'hover:bg-yellow-500/10 hover:text-amber-600 hover:border-amber-400/60 dark:hover:bg-yellow-500/20 dark:hover:text-yellow-200 dark:hover:border-amber-400/60',
      focus: 'focus-visible:ring-yellow-500/40',
    },
    defaultModel: 'openai/gpt-oss-20b',
    modelOptions: ['openai/gpt-oss-20b', 'openai/gpt-oss-120b'],
    greeting:
      'Describe an object you want (e.g., pizza, hot sauce, car). I will propose a JSON Schema with type "object" and useful properties.',
    promptPlaceholder: 'Describe the JSON Schema you want…',
    systemPrompt: [
      'You help design concise JSON Schema definitions (draft-agnostic) for a single object.',
      'Always return exactly one JSON object that is a JSON Schema with top-level "type":"object" and a "properties" map.',
      'Prefer simple types (string, number, integer, boolean, array, object). Include "items" for arrays. Avoid examples or prose.',
      'Avoid unsupported JSON Schema keywords such as "format", "$ref", or vendor-specific extensions. Express constraints with enums or descriptions instead.',
      'Do not include markdown fences or backticks. Return only the JSON Schema object.',
    ].join(' '),
    allowBaseUrlOverride: false,
    enableStlViewer: false,
    logLabel: 'Object Maker',
    defaultBaseUrl: (getEnvValue('VITE_OBJECTMAKER_CHAT_BASE_URL') || FALLBACK_BASE_URL).replace(/\/$/, ''),
  },
  {
    id: 'stlviewer',
    path: '/stlviewer',
    name: 'STL Studio',
    headline: '3D Printing Copilot',
    description: 'Chat about STL files, design tweaks, and 3D printing tips while previewing models inline.',
    badge: '3D',
    heroGradient: 'from-indigo-500 to-slate-700',
    panelAccent: 'bg-indigo-100 text-indigo-900 dark:bg-indigo-500/20 dark:text-indigo-200',
    navAccent: {
      gradient: 'from-indigo-500 to-slate-700',
      hover:
        'hover:bg-indigo-500/10 hover:text-indigo-400 hover:border-indigo-400/60 dark:hover:bg-indigo-500/20 dark:hover:text-indigo-200 dark:hover:border-indigo-400/60',
      focus: 'focus-visible:ring-indigo-500/40',
    },
    defaultModel: 'openai/gpt-oss-20b',
    modelOptions: ['openai/gpt-oss-20b', 'openai/gpt-oss-120b'],
    greeting: 'Hi! Ask me anything about STL models or 3D printing workflows.',
    promptPlaceholder: 'Need help with an STL? Ask about fixes, slicing, or design tweaks...', 
    systemPrompt: [
      'You are a helpful AI assistant who understands STL files and 3D printing workflows.',
      'Provide concise, practical answers and include tips for viewing or tweaking STL content when relevant.',
    ].join(' '),
    allowBaseUrlOverride: false,
    enableStlViewer: true,
    logLabel: 'STL Studio',
    defaultBaseUrl: (getEnvValue('VITE_STL_CHAT_BASE_URL') || FALLBACK_BASE_URL).replace(/\/$/, ''),
  },
  {
    id: 'pokedex',
    path: '/pokedex',
    name: 'Pokedex',
    headline: 'Concise Pokemon Companion',
    description: 'Ask for typings, strengths, weaknesses, and quick lore delivered by a remote Pokedex service.',
    badge: 'Pokemon',
    heroGradient: 'from-rose-500 to-orange-500',
    panelAccent: 'bg-rose-100 text-rose-900 dark:bg-rose-500/20 dark:text-rose-200',
    navAccent: {
      gradient: 'from-rose-500 to-orange-500',
      hover:
        'hover:bg-rose-500/10 hover:text-rose-500 hover:border-rose-400/60 dark:hover:bg-rose-500/20 dark:hover:text-rose-200 dark:hover:border-rose-400/60',
      focus: 'focus-visible:ring-rose-500/40',
    },
    defaultModel: 'openai/gpt-oss-20b',
    modelOptions: ['openai/gpt-oss-20b', 'openai/gpt-oss-120b'],
    greeting: 'Hi! Ask me about any Pokemon and I will fetch quick Pokedex facts.',
    promptPlaceholder: 'Example: What are Gengar strengths and weaknesses?',
    systemPrompt: [
      'You are a remote Pokedex assistant. Answer questions about Pokemon in two or three sentences.',
      'Highlight typings, notable strengths or weaknesses, and other concise Pokedex facts.',
      'If the question falls outside Pokemon, politely redirect the user.',
    ].join(' '),
    allowBaseUrlOverride: true,
    enableStlViewer: false,
    logLabel: 'Pokedex',
    defaultBaseUrl: (getEnvValue('VITE_POKEDEX_CHAT_BASE_URL') || FALLBACK_BASE_URL).replace(/\/$/, ''),
  },
  {
    id: 'imagegen',
    path: '/imagegen',
    name: 'Flux Image Lab',
    headline: 'Prompt → Flux image in seconds',
    description:
      'Send prompts to the Groq-hosted Flux endpoint, preview the returned image, and keep a cookie-backed gallery of recent hits.',
    badge: 'Images',
    heroGradient: 'from-sky-500 to-cyan-600',
    panelAccent: 'bg-sky-100 text-sky-900 dark:bg-sky-500/20 dark:text-sky-200',
    navAccent: {
      gradient: 'from-sky-500 to-cyan-600',
      hover:
        'hover:bg-sky-500/10 hover:text-sky-600 hover:border-sky-400/60 dark:hover:bg-sky-500/20 dark:hover:text-sky-200 dark:hover:border-sky-400/60',
      focus: 'focus-visible:ring-sky-500/40',
    },
    defaultModel: 'flux-image-endpoint',
    modelOptions: ['Flux image endpoint'],
    imageApiBaseUrl: (getEnvValue('VITE_IMAGE_API_BASE_URL') || FALLBACK_BASE_URL).replace(/\/$/, ''),
    allowBaseUrlOverride: false,
    enableStlViewer: false,
    enableBarcodeScanner: false,
    logLabel: 'ImageGen',
  },
  {
    id: 'svglab',
    path: '/svg-lab',
    name: 'SVG Prompt Lab',
    headline: 'Sketch vector art from pure text instructions.',
    description:
      'Feed prompts into the /svg worker endpoint, preview the returned artwork inline, and keep a cookie-backed gallery of your favorite prompts.',
    badge: 'Vector',
    heroGradient: 'from-violet-500 to-purple-600',
    panelAccent: 'bg-violet-100 text-violet-900 dark:bg-violet-500/20 dark:text-violet-200',
    navAccent: {
      gradient: 'from-violet-500 to-purple-600',
      hover:
        'hover:bg-violet-500/10 hover:text-violet-600 hover:border-violet-400/60 dark:hover:bg-violet-500/20 dark:hover:text-violet-200 dark:hover:border-violet-400/60',
      focus: 'focus-visible:ring-violet-500/40',
    },
    defaultModel: 'svg-route',
    modelOptions: ['SVG worker route'],
    allowBaseUrlOverride: false,
    enableStlViewer: false,
    enableBarcodeScanner: false,
    logLabel: 'SVGLab',
    svgApiBaseUrl: (getEnvValue('VITE_SVG_API_BASE_URL') || FALLBACK_BASE_URL).replace(/\/$/, ''),
  },
  {
    id: 'flagfoundry',
    path: '/flag-foundry',
    name: 'Flag Foundry',
    headline: 'Throttle /svg calls to rebuild national flags.',
    description:
      'Queue flag prompts for the SVG worker, loading a new European flag every second with a Unicode reference for accuracy checks.',
    badge: 'Atlas',
    heroGradient: 'from-sky-500 to-blue-600',
    panelAccent: 'bg-sky-100 text-sky-900 dark:bg-sky-500/20 dark:text-sky-200',
    navAccent: {
      gradient: 'from-sky-500 to-blue-600',
      hover:
        'hover:bg-sky-500/10 hover:text-sky-600 hover:border-sky-400/60 dark:hover:bg-sky-500/20 dark:hover:text-sky-200 dark:hover:border-sky-400/60',
      focus: 'focus-visible:ring-sky-500/40',
    },
    defaultModel: 'svg-route',
    modelOptions: ['SVG worker route'],
    allowBaseUrlOverride: false,
    enableStlViewer: false,
    enableBarcodeScanner: false,
    logLabel: 'FlagFoundry',
    svgApiBaseUrl: (getEnvValue('VITE_SVG_API_BASE_URL') || FALLBACK_BASE_URL).replace(/\/$/, ''),
  },
  {
    id: 'pizzamaker',
    path: '/pizza-maker',
    name: 'Pizza Maker',
    headline: 'Design your dream pie, then let Groq plate it.',
    description:
      'Select sauces, cheeses, toppings, and art direction. Groq converts your build into a luxe image prompt and renders the pie.',
    badge: 'Culinary',
    heroGradient: 'from-orange-500 to-red-500',
    panelAccent: 'bg-orange-100 text-orange-900 dark:bg-orange-500/20 dark:text-orange-200',
    navAccent: {
      gradient: 'from-orange-500 to-red-500',
      hover:
        'hover:bg-orange-500/10 hover:text-orange-600 hover:border-orange-400/60 dark:hover:bg-orange-500/20 dark:hover:text-orange-200 dark:hover:border-orange-400/60',
      focus: 'focus-visible:ring-orange-500/40',
    },
    defaultModel: 'openai/gpt-oss-20b',
    modelOptions: ['openai/gpt-oss-20b', 'openai/gpt-oss-120b'],
    greeting: 'Craving something specific? Dial in your toppings and we will stage the perfect pizza photo.',
    promptPlaceholder: 'Describe the pizza mood you want to capture…',
    systemPrompt: [
      'You are a culinary art director who helps users plan photorealistic pizza imagery.',
      'Reference the provided configuration faithfully and suggest plating or styling ideas when asked.',
    ].join(' '),
    allowBaseUrlOverride: false,
    enableStlViewer: false,
    enableBarcodeScanner: false,
    logLabel: 'PizzaMaker',
    imageApiBaseUrl: (getEnvValue('VITE_IMAGE_API_BASE_URL') || FALLBACK_BASE_URL).replace(/\/$/, ''),
    defaultBaseUrl: FALLBACK_BASE_URL,
  },
  {
    id: 'carmaker',
    path: '/car-maker',
    name: 'Car Maker',
    headline: 'Style a hero car and Groq will stage the scene.',
    description:
      'Select the brand, finish, camera angle, and cinematic backdrop. Groq transforms it into a luxe prompt and renders the ride.',
    badge: 'Automotive',
    heroGradient: 'from-slate-900 via-sky-800 to-cyan-600',
    panelAccent: 'bg-slate-900 text-white dark:bg-slate-900 dark:text-slate-100',
    navAccent: {
      gradient: 'from-slate-900 via-sky-800 to-cyan-600',
      hover:
        'hover:bg-slate-900/10 hover:text-slate-900 hover:border-slate-700/60 dark:hover:bg-slate-900/30 dark:hover:text-slate-100 dark:hover:border-slate-500/60',
      focus: 'focus-visible:ring-slate-900/40',
    },
    defaultModel: 'openai/gpt-oss-20b',
    modelOptions: ['openai/gpt-oss-20b', 'openai/gpt-oss-120b'],
    greeting: 'Ready to spec a show-stopping hero car? Tune the exterior and I will help stage it.',
    promptPlaceholder: 'Describe the vibe you want for this hero car shot…',
    systemPrompt: [
      'You are an automotive concept stylist who helps users craft photorealistic hero car imagery.',
      'Only discuss visible exterior design, stance, lighting, and setting.',
    ].join(' '),
    allowBaseUrlOverride: false,
    enableStlViewer: false,
    enableBarcodeScanner: false,
    logLabel: 'CarMaker',
    imageApiBaseUrl: (getEnvValue('VITE_IMAGE_API_BASE_URL') || FALLBACK_BASE_URL).replace(/\/$/, ''),
    defaultBaseUrl: FALLBACK_BASE_URL,
  },
  {
    id: 'newsanalyzer',
    path: '/newsanalyzer',
    name: 'News Analyzer',
    headline: 'Real-time News Analysis',
    description: 'Explore and analyze real-time news feeds from various sources, powered by a Cloudflare Worker.',
    badge: 'News',
    heroGradient: 'from-blue-500 to-sky-600',
    panelAccent: 'bg-blue-100 text-blue-900 dark:bg-blue-500/20 dark:text-blue-200',
    navAccent: {
      gradient: 'from-blue-500 to-sky-600',
      hover:
        'hover:bg-blue-500/10 hover:text-blue-600 hover:border-blue-400/60 dark:hover:bg-blue-500/20 dark:hover:text-blue-200 dark:hover:border-blue-400/60',
      focus: 'focus-visible:ring-blue-500/40',
    },
    defaultModel: 'openai/gpt-oss-20b',
    modelOptions: ['openai/gpt-oss-20b', 'openai/gpt-oss-120b'],
    greeting: 'Welcome to the News Analyzer. Select your topics and let\'s see what\'s happening.',
    promptPlaceholder: 'Ask a question about the news...', 
    systemPrompt: [
      'You are a news analysis assistant.',
      'Use the provided news articles to answer questions and provide summaries.',
      'Be neutral and objective in your analysis.',
    ].join(' '),
    allowBaseUrlOverride: true,
    enableStlViewer: false,
    enableBarcodeScanner: false,
    logLabel: 'NewsAnalyzer',
    defaultBaseUrl: (getEnvValue('VITE_NEWS_BASE_URL') || FALLBACK_BASE_URL).replace(/\/$/, ''),
  },
  {
    id: 'sixdegrees',
    path: '/six-degrees',
    name: 'Six Degrees Of',
    headline: 'Watch a message morph through six parody passes.',
    description:
      'Start with any sentence and see how Groq remixes it into six escalating parodies, delivered one beat at a time.',
    badge: 'Remix',
    heroGradient: 'from-fuchsia-500 to-purple-600',
    panelAccent: 'bg-fuchsia-100 text-fuchsia-900 dark:bg-fuchsia-500/20 dark:text-fuchsia-200',
    navAccent: {
      gradient: 'from-fuchsia-500 to-purple-600',
      hover:
        'hover:bg-fuchsia-500/10 hover:text-fuchsia-600 hover:border-fuchsia-400/60 dark:hover:bg-fuchsia-500/20 dark:hover:text-fuchsia-200 dark:hover:border-fuchsia-400/60',
      focus: 'focus-visible:ring-fuchsia-500/40',
    },
    defaultModel: 'openai/gpt-oss-20b',
    modelOptions: ['openai/gpt-oss-20b', 'openai/gpt-oss-120b'],
    systemPrompt: [
      'You are a playful parody writer. When given any text you respond with a witty parody of it.',
      'Keep responses concise (2-4 sentences) and ensure they clearly riff on the original idea.',
      "Match the length of the original message as closely as possible—no more than about 20% longer than the user's input.",
      'Avoid quoting the original verbatim; reshape it with humor and creative twists.',
    ].join(' '),
    allowBaseUrlOverride: false,
    enableStlViewer: false,
    enableBarcodeScanner: false,
    logLabel: 'SixDegrees',
    defaultBaseUrl: FALLBACK_BASE_URL,
  },
]

export function getExperienceById(id) {
  return experiences.find((exp) => exp.id === id)
}